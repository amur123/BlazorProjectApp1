# SecOps Pipeline runs after the CI Pipeline workflow completes.
# Performs dependency vulnerability and secret leak scans before allowing merges.
name: SecOps Pipeline

on:
  workflow_run:
    workflows: [ "CI Pipeline" ] # Targets the CI Pipeline workflow telling so as to run on completed.
    types: [ completed ]

# Permissions have been kept to a minimum so as to allow dependency checks to complete etc.
permissions:
  contents: read
  security-events: write

jobs:
  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    # Checks out repo so that code can get scanned.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

        # Installs .NET DSK in order to restore, list and build .Net project.
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Restores all NuGet packages.    
      - name: Restore Dependencies
        run: dotnet restore

      # Downloads and extracts the OWASP dependency check tool.
      - name: Install Dependency Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v12.1.0/dependency-check-12.1.0-release.zip
          unzip dependency-check-12.1.0-release.zip
          chmod +x dependency-check/bin/dependency-check.sh

      # Run ths OWASP dependency check tool using NVD database for the project folder and exports reports/dependency-check-report.html.
      - name: Run Dependency Check
        run: |
          ./dependency-check/bin/dependency-check.sh \
            --project "BlazorProjectApp1-SecScan" \
            --out reports \
            --scan BlazorProjectApp1 \
            --nvdApiKey="${{ secrets.NVDAPIKEY }}"

      - name: Dependency Check Summary
        run: |
          echo "HIGH AND CRITICAL VULNERABILITIES FOUND"
          grep -iE "(CRITICAL|HIGH)" reports/dependency-check-report.html \
            || echo "â†’ No High or Critical found in dependency-check-report.html"
            
      # JSON processor used to read array for how many leaks found. 
      # Enforce Vulnerability Block will read the JSON and returns found leaks blocking only if gitleaks JSON shows leaks.
      - name: Install JQ
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      # Downloads and installs Gitleaks to detect secrets in code.    
      - name: Install Gitleaks
        run: |
          curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.26.0/gitleaks_8.26.0_linux_x64.tar.gz \
            -o gitleaks.tar.gz
          tar -xzf gitleaks.tar.gz
          chmod +x gitleaks
          mv gitleaks /usr/local/bin/

      # Runs Gitleaks redacting secrets and saving to JSON report. 
      - name: Run Gitleaks Secrets Scan
        run: gitleaks detect --source . --redact --report-path gitleaks-report.json

      # Echos the JSO file to view leaks detected.  
      - name: Gitleaks Secrets Scan Report
        run: |
          echo "GIT LEAKS SECRET SCAN REPORT"
          cat gitleaks-report.json

      # Enforces blok if it is High/Critical then it is a fail and if the array is greater than 0 meaning leaks found.    
      - name: Enforce Vulnerability Block
        run: |
          dotnet list package --vulnerable || true
          # Block on any high or critical detections from OWASP d ependency check.
          if grep -qE "(CRITICAL|HIGH)" reports/dependency-check-report.html; then
            echo "!!!FAIL!!! Critical vulnerabilities detected blocking merge."
            exit 1
          fi
          leaks=$(jq 'length' gitleaks-report.json)
          if [ "$leaks" -gt 0 ]; then
            echo "!!!FAIL!!! Found $leaks secret leak(s) blocking merge."
            exit 1
          fi

      - name: Confirm SecOps Passed
        run: echo "!!!PASS!! SecOps checks completed without issue."
