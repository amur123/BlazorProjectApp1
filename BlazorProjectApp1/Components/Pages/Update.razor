@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@using Tesseract
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ProjectDBContext DbContext
@inject PostManager PostManager
@attribute [Authorize(Roles = "User,Administrator")]

@page "/update/{PostId:int}"

<h1>Creating Post "@_postToUpdate.Title"</h1>

<EditForm Model="_postToUpdate" OnValidSubmit="UpdatePostAsync">
    <div class="form-group mb-3">
        <label for="postTitle">Title</label>
        <InputText @bind-Value="_postToUpdate.Title" class="form-control" id="postTitle" />
    </div>

    <div class="form-group mb-3">
        <label for="postContent">Content</label>
        <InputText @bind-Value="_postToUpdate.Content" class="form-control" id="postContent" />
    </div>

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="imageUpload">Upload Image</label>
        <InputFile OnChange="ImageUploadHandler" class="form-control" />
    </div>

    @if (!string.IsNullOrEmpty(_postToUpdate.ImageFile))
    {
        <div class="mb-3">
            <img src="@_postToUpdate.ImageFile" style="max-height: 200px;" />
        </div>
    }

    <button class="btn btn-accessibility btn-blue w-100 my-2" type="submit">
        Update
    </button>

    <button @onclick="@(() => NavigationManager.NavigateTo("/"))" class="btn btn-accessibility btn-pink w-100 my-2">
        Cancel
    </button>

</EditForm>

@code {
    [Parameter] public int PostId { get; set; }

    private Post _postToUpdate = new(); // Prevents null reference on initial render.

    // Posts accessed via the PostManager to ensure authorisation.
    protected override async Task OnParametersSetAsync()
    {
        _postToUpdate = await PostManager.GetPostIfAuthorisedAsync(PostId);

        if (_postToUpdate is null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Access denied or post not found.");
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task ImageUploadHandler(InputFileChangeEventArgs e)
    {
        var file = e.File;

        using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
        using var memory = new MemoryStream();
        await stream.CopyToAsync(memory);

        var base64 = Convert.ToBase64String(memory.ToArray());
        var contentType = file.ContentType;

        _postToUpdate.ImageFile = $"data:{contentType};base64,{base64}";
        _postToUpdate.OcrImageText = ExtractTextFromImage(memory.ToArray());
    }

    private async Task UpdatePostAsync()
    {
        DbContext.Posts.Update(_postToUpdate);  // Utilised with Injected DB for testing.

        if (await DbContext.SaveChangesAsync() > 0)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            string errorMessage = $"Failed to update post";
            await JsRuntime.InvokeVoidAsync("alert", errorMessage);
        }
    }

    private string ExtractTextFromImage(byte[] imageBytes)
    {
        try
        {
            using var engine = new TesseractEngine(@"./tessdata", "eng", EngineMode.Default);
            using var img = Pix.LoadFromMemory(imageBytes);
            using var page = engine.Process(img);
            return page.GetText();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"OCR Error: {ex.Message}");
            return "OCR failed.";
        }
    }
}
