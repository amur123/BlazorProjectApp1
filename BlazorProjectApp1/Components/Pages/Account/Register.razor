@using BlazorProjectApp1.Data
@using BlazorProjectApp1.Entities
@using BlazorProjectApp1.Entities.ViewModel
@inject NavigationManager NavigationManager
@inject ProjectDBContext _projectDBContext
@rendermode InteractiveServer

@page "/register"

<h1>Register Account "@_registerModel.Username"</h1>

<EditForm Model="_registerModel" OnValidSubmit="RegisterAccountAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="username">Username</label>
        <InputText @bind-Value="_registerModel.Username" class="form-control" id="username" />
    </div>

    <div class="form-group mb-3">
        <label for="password">Password</label>
        <InputText @bind-Value="_registerModel.Password" class="form-control" id="password" type="password" />
    </div>

    <div class="form-group mb-3">
        <label for="role">Role</label>
        <InputSelect @bind-Value="_registerModel.Role" class="form-control" id="role">
            <option value="User">User</option>
            <option value="Administrator">Administrator</option>
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-accessibility btn-blue">Register</button>
    <button type="button" @onclick="@(() => NavigationManager.NavigateTo("/"))" class="btn btn-accessibility btn-pink ms-2">Cancel</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(_message))
{
    <div class="alert alert-info mt-3">@_message</div> // Creates a dynamic message area where is _message contains text it will be displayed and if it is empty or whitespace nothing will be displayed.
}

@code {
    /// <summary>
    /// 
    /// </summary>
    private RegisterViewModel _registerModel = new()
        {
            Role = "User"
        };

    private string _message; // Stores the message to be displayed to the user.

    // Checks if the username already exists in the database and if not creates a new user account saving to database.
    private async Task RegisterAccountAsync()
    {
        var caseUsername = _registerModel.Username.Trim().ToUpperInvariant(); // Takes the username and converts it to uppercase removing any whitespace.

        var exists = _projectDBContext.UserAccounts.Any(u => u.Username.ToUpper() == caseUsername); // Checks if the username already exists in the database by comparing it to the existing usernames in the database.

        // If the username already exists sets the message and returns stopping registration process.
        if (exists)
        {
            _message = $"Username \"{_registerModel.Username}\" already exists.";
            return;
        }

        // If the username does not exist creates a new user account with the provided username, password, and role.
        var user = new UserAccount
            {
                Username = _registerModel.Username,
                Password = _registerModel.Password,
                Role = _registerModel.Role
            };

        _projectDBContext.UserAccounts.Add(user); // Adds the new user account to the database context.

        if (await _projectDBContext.SaveChangesAsync() > 0) // Attempts to save the changes to the database if successful more than zero changes were made.
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            _message = $"Failed to register account \"{_registerModel.Username}\"."; // If the save fails sets the message to inform the user.
        }
    }
}
