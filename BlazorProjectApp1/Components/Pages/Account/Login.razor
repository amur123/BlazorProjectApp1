@using BlazorProjectApp1.Data
@using BlazorProjectApp1.Entities.ViewModel
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject ProjectDBContext _projectDBContext
@inject NavigationManager navigationManager

@page "/login"

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 text-center">
                <img src="/images/IRIS-Logo.png" style="max-height:5rem;" />
                <h3>Login</h3>
            </div>

            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="@(() => Model.Username)" />
            </div>

            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>

            <div class="mb-3" style="color: white; font-weight: bold;">
                @errorMessage
            </div>

            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
            <p class="text-center mt-3">
                Don't have an account? <a href="/register">Register here</a>.
            </p>
        </EditForm>
    </div>
</div>

@code {
    /// <summary>
    /// Enables server side access to be requested.
    /// Used to access the HttpContext and users can sign in here
    /// </summary>
    [CascadingParameter] public HttpContext HttpContext { get; set; }

    // Binds login data to this model holding entered credentials.
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string errorMessage;

    // Triggers when the form is submitted. Tries to authenticate the user with the provided credentials.
    private async Task Authenticate()
    {
        Console.WriteLine($"LOGIN ATTEMPT: {Model.Username} / {Model.Password}");
        var userAccount = _projectDBContext.UserAccounts.FirstOrDefault(x => x.Username.ToLower() == Model.Username.ToLower() && x.Password == Model.Password); // Retrieves the user account from the database based on the provided username and password.

        if (userAccount is null)
        {
            errorMessage = "Invalid username or password."; // Sends an error message if the user account is not found.
            return;
        }

        // If the user account is found claims the user account of user and role.
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, userAccount.Username),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };

        // Creates a claims identity and principal for the user using cookie authentication.
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity); // Sets a principal for the user  which is used to identify the user in the application.
        await HttpContext.SignInAsync( // Signs in the user using the authentication cookie.
            CookieAuthenticationDefaults.AuthenticationScheme,
            principal
        );


        navigationManager.NavigateTo("/");
    }
}
