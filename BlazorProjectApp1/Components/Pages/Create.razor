@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@using Tesseract
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ProjectDBContext DbContext
@inject PostManager PostManager
@attribute [Authorize(Roles = "User,Administrator")]

@page "/create"

<h1>Creating Post "@_postToCreate.Title"</h1>

<EditForm Model="_postToCreate" OnValidSubmit="CreatePostAsync">
    <div class="form-group mb-3">
        <label for="postTitle">Title</label>
        <InputText @bind-Value="_postToCreate.Title" class="form-control" id="postTitle" />
    </div>

    <div class="form-group mb-3">
        <label for="postContent">Content</label>
        <InputText @bind-Value="_postToCreate.Content" class="form-control" id="postContent" />
    </div>

    <div class="form-group mb-3">
        <label for="imageUpload">Upload Image</label>
        <InputFile OnChange="ImageUploadHandler" class="form-control" />
    </div>

    @if (!string.IsNullOrEmpty(_postToCreate.ImageFile))
    {
        <div class="mb-3">
            <img src="@_postToCreate.ImageFile" style="max-height: 200px;" />
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(_postToCreate.OcrImageText))
    {
        <div class="alert alert-secondary mt-3">
            <strong>OCR Text:</strong>
            <pre>@_postToCreate.OcrImageText</pre>
        </div>
    }

    <button class="btn btn-accessibility btn-blue w-100 my-2" type="submit">
        Create
    </button>

    <button type="button" @onclick="CancelCreate" class="btn btn-accessibility btn-pink w-100 my-2">
        Cancel
    </button>
</EditForm>

@code {
    /// <summary>
    /// Holds the form data for creating a new post.
    /// Initialises with default data to prevent null reference on initial render.
    /// </summary>
    private Post _postToCreate = new Post
        {
            Title = "Post Title",
            Content = "Post Content"
        };

    private void CancelCreate()
    {
        _postToCreate = new Post(); // Clears changes before navigating away from the form helps with OCR upload comiiting changes before create selected.
        NavigationManager.NavigateTo("/");
    }

    /// <summary>
    /// Handles the image upload event.
    /// Reads the image stream, converts it to a base64 string, and displays it in the UI.
    /// Extracts text from the image using OCR and stores it in the post model.
    /// </summary>
    /// <param name="e"> Argument containing the information about the file. </param>
    /// <returns></returns>
    private async Task ImageUploadHandler(InputFileChangeEventArgs e)
    {
        var file = e.File; // Gets the file from the event argument.

        // Opens the file stream with a maximum size of 5 MB to limit large uploads.
        using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // Creates a memory stream to hold the image data.
        using var memory = new MemoryStream(); // Copies the file stream to the memory stream.
        await stream.CopyToAsync(memory);

        var base64 = Convert.ToBase64String(memory.ToArray()); // Converts the image data to a base64 string.
        var contentType = file.ContentType; // Gets the content type of the file uploaded ie: image/jpeg.

        _postToCreate.ImageFile = $"data:{file.ContentType};base64,{base64}"; // Saves the base64 string to the post model.
        _postToCreate.OcrImageText = ExtractTextFromImage(memory.ToArray()); // Extracts text from the image using OCR and saves it to the post model.
    }

    // Modified method to use injected DbContext allowing for shared DB instance so changes made during test are observable and testable.
    // Passes the post model to the PostManager to create a new post in the database.
    // Uses database context to save the post.
    private async Task CreatePostAsync()
    {
        try
        {
            var success = await PostManager.CreatePostAsync(_postToCreate); // Calls the PostManager to create a new post in the database.

            if (success)
            {
                NavigationManager.NavigateTo("/"); // If the post is created successfully navigates back to the home page.
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Failed to create post."); // If the post creation fails shows an alert to the user.
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}"); // Displays any errors that occur during the post creation process.
        }
    }

    /// <summary>
    /// Uses tesseract OCR to extract text from the image.
    /// Requires the Tesseract library to be installed and configured in /tessdata.
    /// </summary>
    /// <param name="imageBytes"> The array of the image where to process OCR. </param>
    /// <returns> Extraxted OCR image text or error message on failure. </returns>
    private string ExtractTextFromImage(byte[] imageBytes)
    {
        try
        {
            using var engine = new TesseractEngine(@"./tessdata", "eng", EngineMode.Default); // Initialises the Tesseract engine with the English language data.
            using var img = Pix.LoadFromMemory(imageBytes); // Loads the image from memory.
            using var page = engine.Process(img); // Processes the image using Tesseract OCR.
            return page.GetText();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"OCR Error: {ex.Message}"); // Logs any errors that occur during the OCR process.
            return "OCR failed.";
        }
    }
}
