@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Authorization
@using Tesseract
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ProjectDBContext DbContext
@inject PostManager PostManager
@attribute [Authorize(Roles = "User,Administrator")]

@page "/create"

<h1>Creating Post "@_postToCreate.Title"</h1>

<EditForm Model="_postToCreate" OnValidSubmit="CreatePostAsync">
    <div class="form-group mb-3">
        <label for="postTitle">Title</label>
        <InputText @bind-Value="_postToCreate.Title" class="form-control" id="postTitle" />
    </div>

    <div class="form-group mb-3">
        <label for="postContent">Content</label>
        <InputText @bind-Value="_postToCreate.Content" class="form-control" id="postContent" />
    </div>

    <div class="form-group mb-3">
        <label for="imageUpload">Upload Image</label>
        <InputFile OnChange="ImageUploadHandler" class="form-control" />
    </div>

    @if (!string.IsNullOrEmpty(_postToCreate.ImageFile))
    {
        <div class="mb-3">
            <img src="@_postToCreate.ImageFile" style="max-height: 200px;" />
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(_postToCreate.OcrImageText))
    {
        <div class="alert alert-secondary mt-3">
            <strong>OCR Text:</strong>
            <pre>@_postToCreate.OcrImageText</pre>
        </div>
    }

    <button class="btn btn-success" type="submit">
        Create
    </button>

    <button @onclick="@(() => NavigationManager.NavigateTo("/"))" class="btn btn-secondary">
        Cancel
    </button>
</EditForm>

@code {
    private Post _postToCreate = new Post
        {
            Title = "Post Title",
            Content = "Post Content"
        };

    private async Task ImageUploadHandler(InputFileChangeEventArgs e)
    {
        var file = e.File;

        using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
        using var memory = new MemoryStream();
        await stream.CopyToAsync(memory);

        var base64 = Convert.ToBase64String(memory.ToArray());
        var contentType = file.ContentType;

        _postToCreate.ImageFile = $"data:{file.ContentType};base64,{base64}";
        _postToCreate.OcrImageText = ExtractTextFromImage(memory.ToArray());
    }

    // Modified method to use injected DbContext allowing for shared DB instance so changes made during test are observable and testable.
    private async Task CreatePostAsync()
    {
        try
        {
            var success = await PostManager.CreatePostAsync(_postToCreate);

            if (success)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Failed to create post.");
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private string ExtractTextFromImage(byte[] imageBytes)
    {
        try
        {
            using var engine = new TesseractEngine(@"./tessdata", "eng", EngineMode.Default);
            using var img = Pix.LoadFromMemory(imageBytes);
            using var page = engine.Process(img);
            return page.GetText();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"OCR Error: {ex.Message}");
            return "OCR failed.";
        }
    }
}
