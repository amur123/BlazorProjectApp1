@using BlazorProjectApp1.Data
@using BlazorProjectApp1.Entities.ViewModel
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject ProjectDBContext _projectDBContext
@inject NavigationManager navigationManager

@page "/login"

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 text-center">
                <img src="/images/IRIS-Logo.png" style="max-height:5rem;" />
                <h3>Login</h3>
            </div>

            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="@(() => Model.Username)" />
            </div>

            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password" />
                <ValidationMessage For="@(() => Model.Password)" />
            </div>

            <div class="mb-3 text-danger">
                @errorMessage
            </div>

            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
            <p class="text-center mt-3">
                Don't have an account? <a href="/register">Register here</a>.
            </p>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter] public HttpContext HttpContext { get; set; }

    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string errorMessage;

    private async Task Authenticate()
    {
        Console.WriteLine($"LOGIN ATTEMPT: {Model.Username} / {Model.Password}");
        var userAccount = _projectDBContext.UserAccounts.FirstOrDefault(x => x.Username.ToLower() == Model.Username.ToLower() && x.Password == Model.Password);

        if (userAccount is null)
        {
            errorMessage = "Invalid username or password.";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, userAccount.Username),
            new Claim(ClaimTypes.Role, userAccount.Role)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(
            CookieAuthenticationDefaults.AuthenticationScheme,
            principal
        );


        navigationManager.NavigateTo("/");
    }
}
